{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","Notification","message","services_notes","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","fontStyle","fontSize","App","props","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","rows","filter","map","components_Note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","setTimeout","toggleImportanceOf","components_Notification","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","App_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.dac66de6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? \"make not important\" : \"make important\";\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content} <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import axios from \"axios\";\r\n\r\nconst baseURL = \"/notes\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseURL);\r\n  const nonExisting = {\r\n    id: 1000,\r\n    content: \"This is fake\",\r\n    date: \"2019-05-30T17:30:31:098Z\",\r\n    important: true\r\n  };\r\n  return request.then(response => response.data.concat(nonExisting));\r\n};\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseURL, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseURL}/${id}`, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nexport default { getAll, create, update };\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Note from \"./components/Note\";\r\nimport Notification from \"./components/Notification\";\r\n\r\nimport noteService from \"./services/notes\";\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: \"green\",\r\n    fontStyle: \"italic\",\r\n    fontSize: 16\r\n  };\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>\r\n        Note app, Department of Computer Science, University of Helsinki 2019\r\n      </em>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst App = props => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState(\"\");\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log(\"effect\");\r\n    noteService.getAll().then(initialNotes => {\r\n      setNotes(initialNotes);\r\n    });\r\n  }, []);\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id);\r\n    const changedNote = { ...note, important: !note.important };\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote)));\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `Note '${note.content}' was already removed from the server`\r\n        );\r\n        setTimeout(() => {\r\n          setErrorMessage(null);\r\n        }, 5000);\r\n        setNotes(notes.filter(n => n.id !== id));\r\n      });\r\n  };\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important === true);\r\n\r\n  const rows = notesToShow.map(note => (\r\n    <Note\r\n      key={note.id}\r\n      note={note}\r\n      toggleImportance={() => toggleImportanceOf(note.id)}\r\n    />\r\n  ));\r\n\r\n  const addNote = event => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5\r\n    };\r\n\r\n    noteService.create(noteObject).then(returnedNote => {\r\n      console.log(returnedNote);\r\n      setNotes(notes.concat(returnedNote));\r\n      setNewNote(\"\");\r\n    });\r\n  };\r\n\r\n  const handleNoteChange = event => {\r\n    console.log(event.target.value);\r\n    setNewNote(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? \"important\" : \"all\"}\r\n        </button>\r\n      </div>\r\n      <ul>{rows}</ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange} />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}